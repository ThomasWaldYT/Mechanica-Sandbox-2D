// Part.Core.cs
// Core data and utilities for Part (Mechanica Sandbox 2D)

using UnityEngine;
using System.Collections.Generic;

public partial class Part : MonoBehaviour
{
    // ?????????????????????????????????????????????????????????????????????????????
    // STATIC SELECTION DATA
    // ?????????????????????????????????????????????????????????????????????????????
    public static bool IsInteracting { get; private set; }
    private static readonly List<Part> currentGroup = new();
    private static Part mainSelected;
    private static Color mainColour = Color.cyan;
    private static Color secondaryColour = new Color(0f, 1f, 1f, 0.35f);

    // ?????????????????????????????????????????????????????????????????????????????
    // CHOOSE?NO?COLLISION MODE
    // ?????????????????????????????????????????????????????????????????????????????
    private static bool choosingNoCollision;
    private static Part chooseSource;
    private static readonly HashSet<Part> chooseSelected = new();

    public static bool ChoosingNoCollision => choosingNoCollision;

    // ?????????????????????????????????????????????????????????????????????????????
    // FREEZE TRACKING
    // ?????????????????????????????????????????????????????????????????????????????
    private static bool lastFrozen;
    private bool Frozen => Time.timeScale == 0f;

    // ?????????????????????????????????????????????????????????????????????????????
    // INSPECTOR FIELDS
    // ?????????????????????????????????????????????????????????????????????????????
    [HideInInspector] public Spawner spawner;

    [Header("Cursor Textures")]
    [SerializeField] private Texture2D curMove;
    [SerializeField] private Texture2D curScale;
    [SerializeField] private Texture2D curDefault;

    [Header("Mass (affects brightness)")]
    [Range(1, 100)] public float mass = 33f;

    // ?????????????????????????????????????????????????????????????????????????????
    // OUTLINE DATA
    // ?????????????????????????????????????????????????????????????????????????????
    private const float LINE_WIDTH = 0.05f;
    private const int CIRCLE_SEGMENTS = 40;
    private LineRenderer outline;

    // ?????????????????????????????????????????????????????????????????????????????
    // PRIVATE STATE
    // ?????????????????????????????????????????????????????????????????????????????
    private Rigidbody2D rb;
    private Collider2D col;
    private SpriteRenderer sr;
    private float baseHue, baseSat;

    private enum DragMode { None, Move, ScaleX, ScaleY, ScaleCircle }
    private DragMode dragMode = DragMode.None;
    private Vector3 dragStartMouse;
    private readonly Dictionary<Part, Vector3> startPos = new();
    private Vector3 groupCentroid;

    // right?click helpers
    private bool rightCandidate;
    private Vector2 rightStartScreen;
    private const float RIGHT_DRAG_PIXELS = 4f;

    // context?menu
    private bool showContextMenu;
    private Vector2 menuGuiPos;
    private Rect contextMenuRect;

    // pan?cancel (drag elsewhere while menu open)
    private bool panCancelCandidate;
    private Vector2 panStartScreen;

    private const float EDGE_BAND = 0.15f;
    private const float ROTATE_STEP = GridSnapping.AngleSnap;
    private float MIN_DIM => GridSnapping.ScaleGrid;

    // connectivity
    private readonly List<Part> connected = new();

    // no?collision tracking
    private readonly HashSet<Part> noCollision = new();

    // ?????????????????????????????????????????????????????????????????????????????
    // BRIGHTNESS HELPERS
    // ?????????????????????????????????????????????????????????????????????????????
    private const float MIN_BRIGHTNESS = 0.3f;
    private const float MAX_BRIGHTNESS = 0.7f;

    private void UpdateBrightness()
    {
        if (!sr) return;
        float t = Mathf.InverseLerp(1f, 100f, mass);
        float v = Mathf.Lerp(MAX_BRIGHTNESS, MIN_BRIGHTNESS, t);
        sr.color = Color.HSVToRGB(baseHue, baseSat, v);
    }

    // ?????????????????????????????????????????????????????????????????????????????
    // CURSOR
    // ?????????????????????????????????????????????????????????????????????????????
    private void ApplyCursor(Texture2D tex) =>
        Cursor.SetCursor(tex,
            tex ? new Vector2(tex.width * 0.5f, tex.height * 0.5f) : Vector2.zero,
            CursorMode.Auto);

    // ?????????????????????????????????????????????????????????????????????????????
    // INITIALISATION
    // ?????????????????????????????????????????????????????????????????????????????
    private void Awake()
    {
        rb = GetComponent<Rigidbody2D>();
        col = GetComponent<Collider2D>();
        sr = GetComponent<SpriteRenderer>();
        if (sr) Color.RGBToHSV(sr.color, out baseHue, out baseSat, out _);

        // outline
        Transform existing = transform.Find("Outline");
        outline = existing ? existing.GetComponent<LineRenderer>() : null;
        if (!outline) BuildOutline();
        HideOutline();
    }

    private void Start()
    {
        rb.mass = mass;
        UpdateBrightness();
    }

    // ?????????????????????????????????????????????????????????????????????????????
    // UTILITY
    // ?????????????????????????????????????????????????????????????????????????????
    private Vector3 GetWorldMouse()
    {
        Vector3 wp = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        wp.z = 0f;
        return wp;
    }

    // Public helpers used by Spawner
    public void SetCursorTextures(Texture2D move, Texture2D scale, Texture2D def)
    { curMove = move; curScale = scale; curDefault = def; }

    public void SetSelectionColours(Color main, Color secondary)
    { mainColour = main; secondaryColour = secondary; }
}
